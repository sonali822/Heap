A Min-Heap is a complete binary tree in which the value in each internal node is smaller than or equal to the values in the children of that node.
Mapping the elements of a heap into an array is trivial: 
if a node is stored a index k, then its left child is stored at index 2k + 1 and its right child at index 2k + 2.


How is Min Heap represented?
A Min Heap is a Complete Binary Tree. A Min heap is typically represented as an array. The root element will be at Arr[0]. For any ith node, i.e., Arr[i]:

Arr[(i -1) / 2] returns its parent node.
Arr[(2 * i) + 1] returns its left child node.
Arr[(2 * i) + 2] returns its right child node.

Operations on Min Heap:

getMin(): It returns the root element of Min Heap. Time Complexity of this operation is O(1).
extractMin(): Removes the minimum element from MinHeap.
Time Complexity of this Operation is O(Log n) as this operation needs to maintain the heap property (by calling heapify()) after removing root.
insert(): Inserting a new key takes O(Log n) time.
We add a new key at the end of the tree. If new key is larger than its parent, then we donâ€™t need to do anything. Otherwise,
we need to traverse up to fix the violated heap property.


Example ---> 

public class MinHeap {
 static void heapify(int arr[],int n,int i)
 {
    int largest=i;
     int left =2*i+1;
     int right = 2*i+2;
     if(left<n && arr[left]<arr[largest])
     {
         largest=left;
     }
     if(right<n && arr[right]<arr[largest])
     {
         largest=right;
     }
     if(largest!=i)
     {
         int swap =arr[i];
         arr[i] = arr[largest];
         arr[largest] =swap ;
         heapify(arr,n,largest);
     }
 }
 static void BuildHeap(int arr[],int n)
 {
     int startIndex = (n/2)-1;
     for(int i=startIndex;i>=0;i--)
     {
         heapify(arr,n,i);
     }
 }
  static void printHeap(int arr[], int n) 
    { 
        System.out.println("Array representation of Heap is:"); 
  
        for (int i = 0; i < n; ++i) 
            System.out.print(arr[i] + " "); 
  
        System.out.println(); 
    } 
    public static void main(String[] args) {
          // Binary Tree Representation 
        // of input array 
        // 1 
        //           /     \ 
        // 3         5 
        //      /    \     /  \ 
        // 4      6   13  10 
        //    / \    / \ 
        // 9   8  15 17 
        int arr[] = { 5,3,17,10,84,19,6,22,9 }; 
  
        int n = arr.length; 
  
        BuildHeap(arr, n); 
  
        printHeap(arr, n); 
    }
}


Output -->  3 5 6 9 84 19 17 22 10 
