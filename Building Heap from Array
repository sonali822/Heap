Given an array of N elements. The task is to build a Binary Heap from the given array. The heap can be either Max Heap or Min Heap.

public class BuildHeap {
 static void heapify(int arr[],int n,int i)
 {
     int largest =i;
     int left = 2*i+1;
     int right = 2*i+2;
     if(left<n && arr[left]>arr[largest])
     {
         largest = left;
     }
      if(right<n && arr[right]>arr[largest])
     {
         largest = right;
     }
      if(largest!=i)
      {
          int swap = arr[i];
          arr[i] = arr[largest];
          arr[largest] = swap;
          heapify(arr,n,largest);
          
      }
 }
 static void BuildHeap1(int arr[],int n)
 {
       // Index of last non-leaf node 
        int startIdx = (n / 2) - 1; 
         // Perform reverse level order traversal 
        // from last non-leaf node and heapify 
        // each node 
        for(int i=startIdx;i>=0;i--)
        {
            heapify(arr,n,i);
        }
 }
 static void printArray(int arr[],int n)
 {
     System.out.println("Array representation of Heap : - ");
     for(int i=0;i<n;i++)
     {
         System.out.print(" "+arr[i]);
     }
 }
    public static void main(String[] args) {
         // Binary Tree Representation 
        // of input array 
        // 1 
        //           /     \ 
        // 3         5 
        //      /    \     /  \ 
        // 4      6   13  10 
        //    / \    / \ 
        // 9   8  15 17 
        int arr[] = { 1, 3, 5, 4, 6, 13, 10, 
                      9, 8, 15, 17 }; 
       BuildHeap1(arr,arr.length);
     printArray(arr,arr.length);
    }
}
Output --> Array representation of Heap : - 
 17 15 13 9 6 5 10 4 8 3 1
