class Solution {
    public int lastStoneWeight(int[] stones) {
        //create maxheap
  PriorityQueue<Integer>maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        //iterate through stones array, then add each stone into maxHeap
   for(int i=0;i<stones.length;i++)
   {
       maxHeap.offer(stones[i]);
   }
        while(maxHeap.size()>1)
        {
         
            int first = maxHeap.poll();//remove the biggest element 
           int second = maxHeap.poll(); //remove the second biggest element
            if(first!=second)//take the bigger stone - smaller stone
            {
                 maxHeap.offer(first-second);
            }
        
            
        }
        //if heap has one or lesser elements, return 0 or the leftover element
        if(maxHeap.isEmpty())
        {
            return 0;
        }
        return maxHeap.remove();
    }
}
