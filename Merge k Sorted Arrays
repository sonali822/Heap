Given K sorted arrays arranged in the form of a matrix of size K*K. The task is to merge them into one sorted array.
Example 1:
Input:
K = 3
arr[][] = {{1,2,3},{4,5,6},{7,8,9}}
Output: 1 2 3 4 5 6 7 8 9
Explanation:Above test case has 3 sorted
arrays of size 3, 3, 3
arr[][] = [[1, 2, 3],[4, 5, 6], 
[7, 8, 9]]
The merged list will be 
[1, 2, 3, 4, 5, 6, 7, 8, 9].
Example 2:

Input:
K = 4
arr[][]={{1,2,3,4}{2,2,3,4},
         {5,5,6,6},{7,8,9,9}}
Output:
1 2 2 2 3 3 4 4 5 5 6 6 7 8 9 9 
Explanation: Above test case has 4 sorted
arrays of size 4, 4, 4, 4
arr[][] = [[1, 2, 2, 2], [3, 3, 4, 4],
[5, 5, 6, 6]  [7, 8, 9, 9 ]]
The merged list will be 
[1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 
6, 6, 7, 8, 9, 9 ].

Your Task:
You need to complete mergeKArrays() function which takes 2 arguments, an arr[k][k] 2D Matrix containing k sorted arrays and 
an integer k denoting the number of sorted arrays. The function should return the merged sorted array
( as a pointer to the merged sorted arrays in cpp, as an ArrayList<Integer> in java, and list in python)

Expected Time Complexity: O(nk Logk)
Expected Auxiliary Space: O(k)

Note: This space is required for returning the resulted sorted array, other work should be done in O(K) Auxiliary Space.

Constraints:
1 <= K <= 100

Company Tags
 Amazon Citrix Flipkart Microsoft VMWare
Topic Tags
 Arrays Heap Sorting
 
----------------------------------------------------------------------------------------------------------------------------------------------------- 
TRY IT FIRST 












Solution -------------------------------

An efficient solution is to use heap data structure. The time complexity of heap based solution is O(N Log k). where N is count of all elements

Create an output array.
Create a min heap of size k and insert 1st element in all the arrays into the heap
Repeat following steps while priority queue is not empty.
Remove minimum element from heap (minimum is always at root) and store it in output array.
Insert next element from the array from which the element is extracted. If the array doesnâ€™t have any more elements, then do nothing.





/*Complete the function below*/
class Solution{
    public static ArrayList<Integer> mergeKArrays(int[][] arrays,int k) 
    {
        //create a minheap
      PriorityQueue<Integer>pq = new PriorityQueue<>();
      int i=0,j=arrays.length-1;
      while(i<=j)
      {
          for(int m=0;m<arrays[0].length;m++)
          {
              if(i<j)
              {
                  pq.add(arrays[i][m]);
                  pq.add(arrays[j][m]);
              }else
              {
                  pq.add(arrays[i][m]);
              }
          }
          i++;
          j--;
      }
      ArrayList<Integer>ans = new ArrayList<>();
      while(pq.size()>0)ans.add(pq.poll());
      return ans;
        
        
    }
}
