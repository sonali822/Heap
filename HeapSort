Heap sort is a comparison based sorting technique based on Binary Heap data structure.
It is similar to selection sort where we first find the maximum element and place the maximum element at the end. 
We repeat the same process for the remaining elements.

Notes: 
Heap sort is an in-place algorithm. 
Time Complexity: Time complexity of heapify is O(Logn).
Time complexity of createAndBuildHeap() is O(n) and overall time complexity of Heap Sort is O(nLogn).



public class HeapSort {
  public void sort(int nums[])
  {
      int n = nums.length;
      for(int i =n/2-1;i>=0;i--)
      {
          heapify(nums,n,i);
      }
       // One by one extract an element from heap
      for(int i= n-1;i>0;i--)
      {
           // Move current root to end
          int temp = nums[0];
          nums[0] = nums[i];
          nums[i]  = temp;
            heapify(nums, i, 0);
      }
  }
  void heapify(int nums[],int n,int i)
  {
      int largest =i;// Initialize largest as root
      int left = 2*i+1;
      int right = 2*i+2;
       // If left child is larger than root
      if(left<n && nums[left]>nums[largest])
      {
          largest = left;
      }
      // If right child is larger than largest so far
      if(right<n && nums[right]>nums[largest])
      {
          largest = right;
      }
        // If largest is not root
      if(largest!=i)
      {
          int swap =nums[i];
          nums[i] = nums[largest];
          nums[largest]=swap;
          heapify(nums,n,largest);
     }
       // Recursively heapify the affected sub-tree
      
  }
  static void printArray(int nums[])
  {
      int n=nums.length;
      for(int i=0;i<n;i++)
      {
          System.out.print(" "+nums[i]);
          System.out.print("");
      }
  }
    public static void main(String[] args) {
        int nums[] = {12, 11, 13, 5, 6, 7 };
        int n = nums.length;
        HeapSort obj = new HeapSort();
        obj.sort(nums);
        printArray(nums);
    }
}



OutPut --->
5 6 7 11 12 13
